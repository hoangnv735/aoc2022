import re
from copy import deepcopy


input_file = "example.txt"
# input_file = 'input.txt'

valve_map = {}
idx = 0
c = ord("A")
for _ in range(10):
    key = chr(c)
    key += key
    valve_map[key] = idx
    idx += 1
    c += 1
idx_map = {v:k for k,v in valve_map.items()}

adj = []
flow = []

with open(input_file) as f:
    for line in f:
        line = line.strip()
        if line != "":
            idx = valve_map[line[6:8]]
            f = re.search(r'(?<=rate\=)\d+', line).group(0)
            flow.append(int(f))
            next_idx = line.find('valves')
            if next_idx == -1:
                next_idx = line.find('valve') + 6
            else:
                next_idx += 7
            adj_v = []
            for v in line[next_idx:].split(','):
                adj_v.append(valve_map[v.strip()])
            adj.append(adj_v)

cur_flow = 0
best_flow = -1
is_open = [0] * len(valve_map.keys())
process = [None] * 32
best_process = None

def max_potential():
    max_potential_flow = 0
    for idx, io in enumerate(is_open):
        if io == 0:
            if max_potential_flow < flow[idx]:
                max_potential_flow = flow[idx]
    return max_potential_flow

def move(idx, t, pidx):
    global cur_flow
    global best_flow
    process[pidx] = f'Move to {idx_map[idx]}' 
    if flow[idx] > 0 and is_open[idx] == 0:
        t -= 1
        is_open[idx] = 1
        cur_flow += t * flow[idx]
        process[pidx+1] = f'Open {idx_map[idx]}'
        if t > 1:
            if cur_flow + (t-2) * max_potential() > best_flow:
                for nidx in adj[idx]:
                    move(nidx, t-1, pidx+2)
        else:
            if best_flow < cur_flow:
                best_flow = cur_flow
                best_process = deepcopy(process)
            cur_flow -= t * flow[idx]
            is_open[idx] = 0
            t += 1
    if t > 1:
        if cur_flow + (t-2) * max_potential() > best_flow:
            for nidx in adj[idx]:
                move(nidx, t-1, pidx+1)
    else:
        if best_flow < cur_flow:
            best_flow = cur_flow
            best_process = deepcopy(process)

move(0, 31, 0)
print(best_flow)    
